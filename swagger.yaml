openapi: 3.0.0
info:
  title: chiri freelancer management system
  version: 1.0.0
  description: The purpose of the Chiri Freelancer Management System is to empower freelancers with efficient tools and resources, streamline freelance operations, foster collaboration, and provide personalized financial insights. This project aims to simplify freelancers' lives and enhance their success in the freelance economy.
  contact:
    name: Muhammad Sujon
    url: https://devsujon.com
    email: devoloper.sujon@gmail.com
servers:
  - description: Development server
    url: http://localhost:4000/api/v1
tags:
  - name: Auth
    description: Authentication Endpoints (public)
  - name: Users
    description: User Endpoints (admin only)
  - name: Categories
    description: Category Endpoints (admin only)
  - name: Invoices
    description: Invoice Endpoints (admin only)
  - name: Bids
    description: Bid Endpoints (admin only)
  - name: Tickets
    description: Ticket Endpoints (admin only)
  - name: Reports
    description: Report Endpoints (admin only)
paths:
  /auth/signup:
    post:
      tags:
        - "Auth"
      description: create a new account
      summary: create a new account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: Mohamamd Sujon
                email:
                  type: string
                  format: email
                  example: admin@devsuon.com
                password:
                  type: string
                  format: password
                  example: pass1234@
                # $ref: "#components/schemas/SignupDto"
      responses:
        "201":
          description: Signup Successful
          content:
            "application/json":
              schema:
                type: object
                required:
                  - statusCode
                  - message
                  - data
                  - links
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Signup Successful
                  data:
                    type: object
                    required:
                      - access_token
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/signup"
                      signin:
                        type: string
                        example: "/auth/signin"
        "400":
          $ref: "#components/responses/400"
        "401":
          $ref: "#components/responses/401"
        "403":
          $ref: "#components/responses/403"
        "404":
          $ref: "#components/responses/404"
        "500":
          $ref: "#components/responses/500"
  /auth/signin:
    post:
      tags:
        - "Auth"
      description: Login to your account
      summary: Login to your account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: admin@devsuon.com
                password:
                  type: string
                  format: password
                  example: pass1234@
              required: [email, password]
      responses:
        "201":
          description: Signin Successful
          content:
            "application/json":
              schema:
                type: object
                required:
                  - statusCode
                  - message
                  - data
                  - links
                properties:
                  statusCode:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Signin Successful
                  data:
                    type: object
                    required:
                      - access_token
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/signin"

        "400":
          $ref: "#components/responses/400"
        "401":
          $ref: "#components/responses/401"
        "403":
          $ref: "#components/responses/403"
        "404":
          $ref: "#components/responses/404"
        "500":
          $ref: "#components/responses/500"
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of users.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - in: query
          name: expand
          description: expand profile
          schema:
            type: string
            example: "profile"
      responses:
        "200":
          description: List of users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/users?page=2&limit=10"
                      next:
                        type: string
                        format: url
                        example: "/users?page=3&limit=10"
                      prev:
                        type: string
                        format: url
                        example: "/users?page=1&limit=10"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    post:
      summary: Create a user
      description: Create a new user.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 201
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/User"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/users?page=2&limit=10"
                      edit:
                        type: string
                        format: url
                        example: "/users/1/edit"
                      delete:
                        type: string
                        format: url
                        example: "/users/1/delete"
                      view:
                        type: string
                        format: url
                        example: "/users/1"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
  /users/{id}:
    get:
      summary: Get a single user
      description: Retrieve a user by ID.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "200":
          description: User retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/404"
    patch:
      summary: Update a user
      description: Update a user by ID.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  type: string
                status:
                  type: string
              required:
                - name
                - email
                - role
                - status
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      status:
                        type: string
                  links:
                    type: object
                    properties:
                      self:
                        type: string
        "404":
          $ref: "#/components/responses/404"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
    delete:
      summary: Delete a user
      description: Delete a user by ID.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: User deleted successfully.
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/400"
  /users/{id}/password:
    patch:
      summary: Change password
      description: Change the password for a user by ID.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        "200":
          description: Password changed successfully.
        "404":
          $ref: "#/components/responses/404"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
  /categories:
    get:
      summary: Get all Categories
      description: Retrieve a list of categories.
      security:
        - bearerAuth: []
      tags:
        - Categories
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/searchParam"
        - in: query
          name: expand
          description: expand user object
          schema:
            type: string
            example: "user"
      responses:
        "200":
          description: List of categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/articles?page=2&limit=10"
                      next:
                        type: string
                        format: url
                        example: "/articles?page=3&limit=10"
                      prev:
                        type: string
                        format: url
                        example: "/articles?page=1&limit=10"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    post:
      summary: Create a Category
      description: Create a new category.
      security:
        - bearerAuth: []
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - active
                - type
              properties:
                name:
                  type: string
                active:
                  type: boolean
                type:
                  type: string
                  enum: [TICKET, BID, INVOICE]
                  default: "BID"
      responses:
        "201":
          description: Category created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 201
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Category"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/articles?page=2&limit=10"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
  /categories/{id}:
    get:
      summary: Get a single Category
      description: Retrieve a category by ID.
      security:
        - bearerAuth: []
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to retrieve.
          schema:
            type: string
        - in: query
          name: expand
          description: expand user object
          schema:
            type: string
            example: "user"
      responses:
        "200":
          description: Category retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    patch:
      summary: Update a Category
      description: Update a category by ID.
      security:
        - bearerAuth: []
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                active:
                  type: boolean
                type:
                  type: string
                  enum: [TICKET, BID, INVOICE]
                  default: "BID"
      responses:
        "200":
          description: Category updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    delete:
      summary: Delete a Category
      description: Delete a category by ID.
      security:
        - bearerAuth: []
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to delete.
          schema:
            type: string
      responses:
        "204":
          description: Category deleted successfully.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
  /invoices:
    get:
      summary: Get all Invoices
      description: Retrieve a list of invoices.
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/searchParam"
      responses:
        "200":
          description: List of invoices.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Invoice"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/invoices?page=2&limit=10"
                      next:
                        type: string
                        format: url
                        example: "/invoices?page=3&limit=10"
                      prev:
                        type: string
                        format: url
                        example: "/invoices?page=1&limit=10"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    post:
      summary: Create an Invoice
      description: Create a new invoice.
      security:
        - bearerAuth: []
      tags:
        - Invoices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Invoice"
      responses:
        "201":
          description: Invoice created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 201
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Invoice"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/invoices?page=2&limit=10"
                      next:
                        type: string
                        format: url
                        example: "/invoices?page=3&limit=10"
                      prev:
                        type: string
                        format: url
                        example: "/invoices?page=1&limit=10"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
  /invoices/{id}:
    get:
      summary: Get a single Invoice
      description: Retrieve an invoice by ID.
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "200":
          description: Invoice retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    patch:
      summary: Update an Invoice
      description: Update an invoice by ID.
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Invoice"
      responses:
        "200":
          description: Invoice updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    delete:
      summary: Delete an Invoice
      description: Delete an invoice by ID.
      tags:
        - Invoices
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: Invoice deleted successfully.
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
  /bids:
    get:
      summary: Get all Bids
      description: Retrieve a list of bids.
      tags:
        - Bids
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/searchParam"
      responses:
        "200":
          description: List of bids.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Bid"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/bids?page=2&limit=10"
                      next:
                        type: string
                        format: url
                        example: "/bids?page=3&limit=10"
                      prev:
                        type: string
                        format: url
                        example: "/bids?page=1&limit=10"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    post:
      summary: Create a Bid
      description: Create a new bid.
      tags:
        - Bids
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bid"
      responses:
        "201":
          description: Bid created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 201
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Bid"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/bids/123"
                      edit:
                        type: string
                        format: url
                        example: "/bids/123/edit"
                      delete:
                        type: string
                        format: url
                        example: "/bids/123/delete"
                      view:
                        type: string
                        format: url
                        example: "/bids/123/view"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
  /bids/{id}:
    get:
      summary: Get a single Bid
      description: Retrieve a bid by ID.
      tags:
        - Bids
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "200":
          description: Bid retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bid"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    patch:
      summary: Update a Bid
      description: Update a bid by ID.
      tags:
        - Bids
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bid"
      responses:
        "200":
          description: Bid updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bid"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    delete:
      summary: Delete a Bid
      description: Delete a bid by ID.
      tags:
        - Bids
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: Bid deleted successfully.
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
  /tickets:
    get:
      summary: Get all Tickets
      description: Retrieve a list of tickets.
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/searchParam"
      responses:
        "200":
          description: List of tickets.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ticket"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/tickets?page=2&limit=10"
                      next:
                        type: string
                        format: url
                        example: "/tickets?page=3&limit=10"
                      prev:
                        type: string
                        format: url
                        example: "/tickets?page=1&limit=10"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    post:
      summary: Create a Ticket
      description: Create a new ticket.
      tags:
        - Tickets
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ticket"
      responses:
        "201":
          description: Ticket created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 201
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Ticket"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/tickets/123"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
  /tickets/{id}:
    get:
      summary: Get a single Ticket
      description: Retrieve a ticket by ID.
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "200":
          description: Ticket retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/400"
    patch:
      summary: Update a Ticket
      description: Update a ticket by ID.
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ticket"
      responses:
        "200":
          description: Ticket updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Ticket"
        "404":
          $ref: "#/components/responses/404"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
    delete:
      summary: Delete a Ticket
      description: Delete a ticket by ID.
      tags:
        - Tickets
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: Ticket deleted successfully.
        "404":
          $ref: "#/components/responses/404"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    pageParam:
      in: query
      name: page
      description: Current page number (default 1).
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      in: query
      name: limit
      description: Number of items per page (default 10).
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: Type of sort, either asc or desc (default desc).
      schema:
        type: string
        enum: [asc, dsc]
        example: dsc
    sortByParam:
      in: query
      name: sort_by
      description: Property used for sorting, either updatedAt or title (default updatedAt).
      schema:
        type: string
        example: updatedAt
    searchParam:
      in: query
      name: search
      description: Search keyword for filtering categories by name.
      schema:
        type: string
        example: title
    idPathParam:
      in: path
      name: id
      required: true
      description: The unique identifier of the item.
      schema:
        type: integer
        format: int32
        example: 1
  responses:
    "500":
      description: "Internal Server Error"
      content:
        "application/json":
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: We are sorry for the inconvenience. Please try again later
    "400":
      description: "Bad Request"
      content:
        "application/json":
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              message:
                type: string
                example: Invalid Parameters
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email
                    in:
                      type: string
                      enum: [query, body]
                      example: body
    "401":
      description: Unauthorized
      content:
        "application/json":
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: "Sorry, you are not authorized to access this resource."
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            required:
              - statusCode
              - error
              - message
            properties:
              statusCode:
                type: integer
                format: int32
                example: 403
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: You don't have the right permissions
    "404":
      description: Resource Not Found
      content:
        "application/json":
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
  schemas:
    Timestamp:
      type: object
      properties:
        createdAt:
          description: Timestamp indicating when the bid was created.
          type: string
          format: date-time
        updatedAt:
          description: Timestamp indicating when the bid was last updated.
          type: string
          format: date-time
      required:
        - createdAt
        - updatedAt
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required:
        - page
        - limit
        - totalPage
        - totalItems
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - freelancer
            - buyer
            - seller
            - admin
          default: freelancer
        status:
          type: string
          enum:
            - pending
            - approved
            - block
            - decline
          default: pending
        timestamp:
          type: string
          format: date-time
    Profile:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string
        email:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        gender:
          type: string
        brief:
          type: string
        profileImage:
          type: string
        phone:
          type: string
        fax:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        socialMedia:
          type: string
        timestamp:
          $ref: "#/components/schemas/Timestamp"
    SignupDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: Mohamamd Sujon
        email:
          type: string
          format: email
          example: admin@devsuon.com
        password:
          type: string
          format: password
          example: pass1234@
    SigninDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: admin@devsuon.com
        password:
          type: string
          format: password
          example: pass1234@
    AuthorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: "Muhammad Sujon"
    Category:
      type: object
      required:
        - id
        - userId
        - name
        - active
        - type
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string
        active:
          type: boolean
        type:
          type: string
          enum: [TICKET, BID, INVOICE]
          default: "BID"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
    Invoice:
      type: object
      properties:
        _id: # Use _id to represent MongoDB ObjectId
          type: string
          description: MongoDB ObjectId for the invoice.
          example: "5f4d6216ef61f0e8f3c990e1"
        userId:
          type: integer
          format: int32
          description: ID of the user associated with this invoice.
          example: 123
        categoryId:
          type: string
          description: Category associated with this invoice.
          example: "12345"
        invoiceNumber:
          type: string
          description: Invoice number.
          example: "INV-2023-001"
        dateOfCreation:
          type: string
          format: date-time
          description: Date of invoice creation.
          example: "2023-09-15T10:30:00Z"
        dateSent:
          type: string
          format: date-time
          description: Date when the invoice was sent.
          example: "2023-09-20T12:45:00Z"
        dateDue:
          type: string
          format: date-time
          description: Due date for the invoice.
          example: "2023-10-05T23:59:59Z"
        tax:
          type: number
          format: float
          description: Tax amount for the invoice.
          example: 100.0
        discount:
          type: number
          format: float
          description: Discount amount applied to the invoice.
          example: 20.0
        amountDue:
          type: number
          format: float
          description: Total amount due on the invoice.
          example: 800.0
        brief:
          type: string
          description: Brief description or notes related to the invoice.
          example: "Payment due upon receipt."
        status:
          type: string
          enum:
            - NEW
            - COMPLETE
          description: Status of the invoice (new or complete).
          example: "NEW"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
      required:
        - userId
        - invoiceNumber
        - dateOfCreation
        - dateDue
        - status
      xml:
        name: Invoice
    Bid:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the bid.
          example: 1
        userId:
          type: integer
          format: int32
          description: ID of the user who initiated the bid.
          example: 123
        buyerId:
          type: integer
          format: int32
          description: ID of the buyer associated with this bid.
          example: 456
        sellerId:
          type: integer
          format: int32
          description: ID of the seller associated with this bid.
          example: 789
        categoryId:
          type: string
          description: ID of the category associated with this bid.
          example: "abc123"
        bidNumber:
          type: integer
          format: int32
          description: Bid number.
          example: 42
        dateOfBid:
          type: string
          format: date-time
          description: Date and time when the bid was placed.
          example: "2023-09-15T14:30:00Z"
        bidStatus:
          type: string
          description: Status of the bid.
          enum: [ACCEPTED, REJECTED, SELECTED, WAITING]
          example: "WAITING"
        paymentType:
          type: string
          enum: [CARD, CASH, CHEQUE, ESCROW]
          description: Payment type for the bid.
          example: "CARD"
        price:
          type: integer
          format: int32
          description: Bid price.
          example: 500
        tax:
          type: integer
          format: int32
          description: Tax amount for the bid.
          example: 50
        discount:
          type: integer
          format: int32
          description: Discount amount applied to the bid.
          example: 10
        amountDue:
          type: integer
          format: int32
          description: Total amount due for the bid.
          example: 540
        brief:
          type: string
          description: Brief description or notes related to the bid.
          example: "Payment due upon completion."
        timestamp:
          $ref: "#/components/schemas/Timestamp"
      required:
        - userId
        - categoryId
        - bidNumber
        - bidStatus
        - price
        - timestamp
      xml:
        name: Bid
    Ticket:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        categoryId:
          type: integer
        ticketNumber:
          type: integer
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        ticketSubject:
          type: string
        dateOfCreation:
          type: string
          format: date-time
        type:
          type: string
          enum: [WEB_DESIGN, LOGO_DESIGN, BRANDING, SOFTWARE_CONSULTING]
          default: WEB_DESIGN
        timestamp:
          $ref: "#/components/schemas/Timestamp"
